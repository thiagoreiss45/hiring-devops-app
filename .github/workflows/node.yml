name: Build, Push, and Deploy to ECR and ECS

on:
  push:
    branches:
      - main  
env:
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}

jobs:
  build_push_deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      
      - name: Build, tag, and push docker image to Amazon ECR Public
        id: build-image
        run: |
          docker build -t meteor-hiring-thiago-repo .
          docker tag meteor-hiring-thiago-repo:latest public.ecr.aws/t8y4c8l7/meteor-hiring-thiago-repo:latest
          docker push ${{ secrets.AWS_ECR_REPOSITORY }}:latest
          echo "::set-output name=image::public.ecr.aws/t8y4c8l7/meteor-hiring-thiago-repo:latest"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition meteor0505 --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: testr
          image: ${{ steps.build-image.outputs.image }}
      
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: meteor-service-2
      #     cluster: meteor-ecs-cluster
      #     wait-for-service-stability: true
